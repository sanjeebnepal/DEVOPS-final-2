# 🚀 Full-Stack DevOps Pipeline: Next.js Deployment using Jenkins, Docker & Kubernetes

This project implements a full CI/CD pipeline for a **Next.js web application**, leveraging DevOps tools and best practices to streamline automated testing, containerization, and deployment across development, staging, and production environments.

## 📁 Project Structure
- **Frontend Framework:** Next.js
- **CI/CD:** Jenkins
- **Containerization:** Docker
- **Orchestration:** Kubernetes (K3s)
- **Testing:** Cypress
- **VM Provisioning:** Vagrant
- **Source Control:** Git, GitHub

## 📌 Objective
To automate the process of building, testing, and deploying a modern web application using a full DevOps pipeline, minimizing manual overhead and ensuring consistent, reproducible environments.

---

## 🔧 Tools Used

| Tool        | Purpose                           |
|-------------|-----------------------------------|
| Vagrant     | Provision VMs for Jenkins, staging, production |
| Jenkins     | Build, test, and deployment pipelines |
| Docker      | Build and run application containers |
| Kubernetes  | Deploy app across multiple nodes  |
| Cypress     | End-to-end testing                |
| GitHub      | Code hosting and pipeline triggers |
| Ngrok       | Webhook tunneling for GitHub      |

---

## 🧱 Architecture Overview

The system is divided into three main environments:

1. **Development** (Test Pipeline)
2. **Staging** (Kubernetes cluster with 3 VMs)
3. **Production** (Kubernetes cluster with 3 VMs)

Each environment is provisioned using **Vagrant**, with the scripts available [here](https://github.com/sanjeebnepal/Vagrant-script-jenkinsdockerkubernetes.git).

---

## 🔄 CI/CD Pipelines

### ✅ Test Pipeline
- Triggered via GitHub webhook.
- Runs Cypress end-to-end tests.
- Builds Docker image.
- Tests the image locally via `curl`.
- Pushes image to Docker Hub.
- Triggers the **Staging Pipeline**.

### 🧪 Staging Pipeline
- Deploys Docker image to a K3s Kubernetes cluster (3 VMs).
- Jenkins connects via SSH to execute deployment scripts.
- Verifies app accessibility via exposed NodePort `31000`.

### 🚢 Production Pipeline
- Identical setup to staging.
- Final deployment using verified Docker image from Docker Hub.
- Confirms success via application access on production cluster.

---

## 🔐 Jenkins & GitHub Integration

- **SSH Keys**: Used for GitHub access and remote VM control.
- **Credentials Manager**: Stores DockerHub and SSH credentials.
- **Ngrok**: Exposes Jenkins for GitHub webhook communication.

---

## 📸 Screenshots & Logs (Optional)
_Add screenshots of your Jenkins pipelines, Cypress test output, or Kubernetes dashboard if desired._

---

## 🧠 Lessons Learned

- CI/CD end-to-end implementation using open-source tools.
- Environment replication using Vagrant.
- Complex pipeline automation in Jenkins.
- Kubernetes deployments with real-world challenges.

---

## ✅ Future Enhancements

- Add monitoring (Prometheus/Grafana).
- Implement centralized logging (ELK Stack).
- Adopt GitOps workflow with ArgoCD or Flux.
- Support for blue-green or canary deployments.

---

## 👥 Contributors

- **Sanjeeb Nepal**
- **Nabin Shrestha**
- **Diwash Shrestha**
- **Divas Kumar Mahato**
- **Divash Raj Upreti**

---

## 📜 License

This project is for educational purposes and part of the **DevOps for Cloud Computing** course at Lambton College.

---

